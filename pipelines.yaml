```yaml
# tech_stack_detector.py
# CI/CD pipeline for a React application

name: React CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  # Job to lint and format the code
  lint_and_format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # or your preferred Node.js version

      - name: Install dependencies
        run: npm install

      - name: Lint with ESLint
        run: npm run lint

      - name: Format with Prettier
        run: npm run format
  # Job to run unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # or your preferred Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test:ci # Assuming you have a test script named test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Optional: If you use Codecov
          flags: unit
          fail_ci_if_error: true

  # Job to build the application
  build:
    runs-on: ubuntu-latest
    needs: [lint_and_format, test] # Ensure linting, formatting, and testing pass before building
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # or your preferred Node.js version

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

  # Job to deploy the application to production (example using Surge.sh)
  deploy:
    runs-on: ubuntu-latest
    needs: build # Ensure the build job completes successfully
    environment:
      name: Production
      url: ${{ steps.surge.outputs.surge_url }} # dynamic url from surge
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Install Surge
        run: npm install -g surge

      - name: Deploy to Surge
        id: surge
        run: surge ./build ${{ secrets.SURGE_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }}

```