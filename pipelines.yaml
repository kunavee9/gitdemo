```yaml
# tech_stack_detector.py
name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Install dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint # Assuming you have a lint script in package.json

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm run test # Assuming you have a test script in package.json

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Install dependencies
        run: npm install
      - name: Build project
        run: npm run build # Assuming you have a build script in package.json
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist # Or your build output directory
  
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Deploy to Production #Example deployment step - replace with your actual deployment steps
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
          # e.g., deploying to a server, cloud provider, etc.
          echo "Deployment complete!"
```