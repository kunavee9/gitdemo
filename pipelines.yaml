```yaml
# tech_stack_detector.py
# Pipeline for building and deploying a Java application using Maven.
# Includes steps for checkout, build, test, and deployment.
# Uses best practices for caching dependencies and parallel execution.
# Assumes a standard Maven project structure.

stages:
  - Checkout
  - Build
  - Test
  - Package
  - Deploy

variables:
  MAVEN_CLI_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
  MAVEN_OPTS: "-Xms256m -Xmx512m"

cache:
  paths:
    - .m2/repository/
    - target/

checkout:
  stage: Checkout
  image: alpine/git:latest
  script:
    - echo "Checking out the code..."
    - git clone --depth 1 --single-branch --branch $CI_COMMIT_REF_NAME $CI_REPOSITORY_URL .
  artifacts:
    paths:
      - .git/

build:
  stage: Build
  image: maven:3.8.6-jdk-11
  script:
    - echo "Building the application..."
    - mvn $MAVEN_CLI_OPTS compile

test:
  stage: Test
  image: maven:3.8.6-jdk-11
  script:
    - echo "Running tests..."
    - mvn $MAVEN_CLI_OPTS test

package:
  stage: Package
  image: maven:3.8.6-jdk-11
  script:
    - echo "Packaging the application..."
    - mvn $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 week

deploy:
  stage: Deploy
  image: alpine/helm:3.10.3 # Example using Helm
  before_script:
    - echo "Setting up deployment environment..."
    - apk add --update --no-cache openssh-client # Add SSH client if needed for deployment
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa #Use secret variable SSH_PRIVATE_KEY
    - chmod 400 ~/.ssh/id_rsa
    - ssh-keyscan $DEPLOYMENT_HOST >> ~/.ssh/known_hosts #Use secret variable DEPLOYMENT_HOST
    - helm version
  script:
    - echo "Deploying the application..."
    - helm upgrade --install my-app target/*.jar --set image.tag=$CI_COMMIT_SHA #Example deployment
  environment:
    name: production
    url: $DEPLOYMENT_URL #Use secret variable DEPLOYMENT_URL
  only:
    - main
  when: manual
```