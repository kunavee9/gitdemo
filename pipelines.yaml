```yaml
# tech_stack_detector.py
# Pipeline for a Java project using Maven for build automation.
# Includes stages for build, test, static analysis, and deployment.
# Assumes Maven `pom.xml` is in the root of the repository.

stages:
  - Build
  - Test
  - Static Analysis
  - Deploy

variables:
  MAVEN_IMAGE: maven:3.8.6-jdk-11

build:
  stage: Build
  image: $MAVEN_IMAGE
  script:
    - echo "Starting Maven build..."
    - mvn clean install -DskipTests # Skip tests during initial build phase. Can be removed to run tests during build.
  artifacts:
    paths:
      - target/*.jar # Assuming the output is a JAR file; adjust if different.
    expire_in: 1 day

test:
  stage: Test
  image: $MAVEN_IMAGE
  script:
    - echo "Running Maven tests..."
    - mvn test # Execute tests.  If tests were already executed during the build stage, this could be adjusted (e.g., using `mvn verify`).
  dependencies:
    - build
  coverage: '/Total.*?([0-9]{1,3})%/'
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml # Location of JUnit test reports. Adjust as needed.
    expire_in: 1 day

static_analysis:
  stage: Static Analysis
  image: $MAVEN_IMAGE
  script:
    - echo "Performing static analysis with SpotBugs..."
    - mvn spotbugs:check # Runs SpotBugs static analysis. Requires SpotBugs plugin configured in pom.xml
    - echo "Performing static analysis with PMD..."
    - mvn pmd:check      # Runs PMD static analysis.     Requires PMD plugin configured in pom.xml
  dependencies:
    - build #Depends on build stage because the code should have been compiled first
  allow_failure: true # Allow the pipeline to continue even if static analysis fails.

deploy:
  stage: Deploy
  image: docker:latest
  before_script:
    - apk add --no-cache curl # Install curl inside the docker image used by the runner
  script:
    - echo "Deploying application..."
    - echo "Deployment logic goes here.  Example: Deploying a Docker image"
    - echo "Consider using environment variables for sensitive information (e.g., deployment keys)."
    # Example Docker login and push (replace with your actual deployment logic)
    # - docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" "$DOCKER_REGISTRY_URL"
    # - docker build -t "$DOCKER_REGISTRY_URL/$IMAGE_NAME:$CI_COMMIT_SHA" .
    # - docker push "$DOCKER_REGISTRY_URL/$IMAGE_NAME:$CI_COMMIT_SHA"
  dependencies:
    - build
  environment:
    name: production
    url: https://example.com # Replace with your actual application URL
  only:
    - main # Deploy only from the main branch
  when: manual #Require a manual start to be deployed
```