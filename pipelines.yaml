```yaml
# tech_stack_detector.py
# Pipeline for a Java (Maven) project
# Includes build, test, and deploy stages

stages:
  - Build
  - Test
  - Deploy

build:
  stage: Build
  image: maven:3.8.6-openjdk-17
  script:
    - echo "Building the project..."
    - mvn clean install -DskipTests # Clean, install dependencies and build, skipping tests for speed
  artifacts:
    paths:
      - target/*.jar # Store the built JAR file as an artifact
    expire_in: 1 day

test:
  stage: Test
  image: maven:3.8.6-openjdk-17
  script:
    - echo "Running tests..."
    - mvn test # Run the tests
  dependencies:
    - build # Depend on the build stage to access the built JAR
  coverage: '/Total.*?([0-9]{1,3})%/' # Regex to capture coverage %
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml # Collect JUnit test reports

deploy:
  stage: Deploy
  image: docker:latest # Using docker image to execute deploy commands.
  services:
    - docker:dind # Docker in docker service
  variables:
    DOCKER_REGISTRY: your-docker-registry # Replace with your actual Docker registry
    DOCKER_IMAGE_NAME: your-image-name     # Replace with your actual image name
  before_script:
    - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY # Authenticate with the Docker registry
  script:
    - echo "Deploying the application..."
    - docker build -t $DOCKER_IMAGE_NAME . # Build Docker image
    - docker tag $DOCKER_IMAGE_NAME $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHA # Tag the image
    - docker push $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHA  # Push the image to the registry
  dependencies:
    - build  # Depend on the build stage to access the built JAR
  only:
    - main  # Only deploy on the main branch
  environment:
    name: production
    url: https://your-application-url.com # Replace with your actual application URL
```