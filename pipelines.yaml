```yaml
# tech_stack_detector.py
# Pipeline for building, testing, and deploying a Java application using Maven.
# Includes stages for checkout, build, test, SonarQube analysis, and deployment.

stages:
  - checkout
  - build
  - test
  - sonar
  - deploy

checkout:
  stage: checkout
  image: alpine/git:latest
  script:
    - echo "Checking out the code..."
    - git clone --depth 1 --single-branch --branch $CI_COMMIT_REF_NAME $CI_REPOSITORY_URL .
  artifacts:
    paths:
      - . # Persist all files for subsequent stages

build:
  stage: build
  image: maven:3.8.6-jdk-11 # Using a specific Maven and JDK version
  script:
    - echo "Building the application..."
    - mvn clean install -DskipTests # Build and skip tests for this stage.
  artifacts:
    paths:
      - target/*.jar # Specify the JAR file as an artifact.

test:
  stage: test
  image: maven:3.8.6-jdk-11
  script:
    - echo "Running tests..."
    - mvn test # Execute the tests

sonar:
  stage: sonar
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required for the SonarCloud analysis
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "Running SonarQube analysis..."
    - sonar-scanner \
      -Dsonar.projectKey=$SONAR_PROJECT_KEY \
      -Dsonar.sources=. \
      -Dsonar.host.url=$SONAR_HOST_URL \
      -Dsonar.login=$SONAR_TOKEN
  allow_failure: true # Allows the pipeline to continue even if the SonarQube analysis fails.

deploy:
  stage: deploy
  image: docker:latest # Using Docker for deployment.  Adjust as needed.
  variables:
    DOCKER_TLS_CERTDIR: "" # Needed for Docker-in-Docker
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Building and deploying the Docker image..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - echo "Deployment complete (image pushed: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA).  Further deployment steps (e.g., Kubernetes apply) would go here."
  only:
    - main # Deploy only from the main branch (adjust as needed).
```