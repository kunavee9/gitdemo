```yaml
# tech_stack_detector.py
# Pipeline for building, testing, and deploying a Java application using Maven.
# Follows industry best practices for CI/CD pipelines.
# Uses Maven for dependency management and build automation.
# Includes stages for build, test, code analysis, and deployment.

stages:
  - Build
  - Test
  - Code Analysis
  - Deploy

variables:
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

cache:
  paths:
    - .m2/repository/
    - target/

build:
  stage: Build
  image: maven:3.8.6-jdk-11
  script:
    - echo "Building the application..."
    - mvn $MAVEN_CLI_OPTS clean install -DskipTests
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 week

test:
  stage: Test
  image: maven:3.8.6-jdk-11
  script:
    - echo "Running unit tests..."
    - mvn $MAVEN_CLI_OPTS test
  coverage: '/Total.*?([0-9]{1,3})%/' # Adjust regex based on your coverage tool's output
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml  # Adjust path if necessary
    expire_in: 1 week
  dependencies:
    - build

code_analysis:
  stage: Code Analysis
  image: maven:3.8.6-jdk-11
  script:
    - echo "Performing code analysis with SonarQube..."
    - mvn $MAVEN_CLI_OPTS sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
  allow_failure: true # Allows the pipeline to continue even if code analysis fails
  dependencies:
    - build

deploy:
  stage: Deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - echo "Deploying to environment..."
    # Add deployment script here, e.g., using kubectl, docker-compose, etc.
    # Example:
    # - kubectl apply -f deployment.yaml
  environment:
    name: production
    url: https://example.com  # Replace with your application's URL
  only:
    - main # Trigger deployment only on the main branch
  dependencies:
    - build
```