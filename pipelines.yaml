```yaml
# tech_stack_detector.py
stages:
  - stage: Build
    jobs:
      - job: MavenBuild
        displayName: 'Maven Build and Test'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Maven@3
            displayName: 'Maven Build'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean install'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8' # Or appropriate JDK version
              mavenAuthenticateFeed: false
              mavenOpts: '-Dmaven.repo.local=$(Agent.BuildDirectory)/.m2/repository'

  - stage: SonarQubeAnalysis
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: Analyze
        displayName: 'SonarQube Analysis'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
            displayName: 'Prepare analysis on SonarQube'
            inputs:
              SonarQube: 'your_sonarqube_connection' # Replace with your SonarQube service connection
              scannerMode: 'Maven'
              projectKey: 'your_project_key'  # Replace with your SonarQube project key
              projectName: 'Your Project Name' # Replace with your SonarQube project name

          - task: Maven@3
            displayName: 'Run SonarQube analysis'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'
              mavenOpts: '-Dsonar.login=$(sonarQubeToken)' # Ensure this variable is defined in your pipeline variables
              publishJUnitResults: false

          - task: SonarSource.sonarqube.291ed09f-5c64-462f-994e-51593e6225b1.SonarQubePublish@5
            displayName: 'Publish Quality Gate Result'
            inputs:
              pollingTimeoutSec: '300'

  - stage: Package
    dependsOn: SonarQubeAnalysis
    condition: succeeded()
    jobs:
      - job: PackageArtifact
        displayName: 'Package Artifact'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: CopyFiles@2
            displayName: 'Copy Files to Artifact Staging Directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: 'target/*.jar' # Adjust based on your artifact type
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: Deploy
    dependsOn: Package
    condition: succeeded()
    jobs:
      - job: DeployToEnvironment
        displayName: 'Deploy to Environment'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'YourEnvironmentName' # Replace with your environment name
        steps:
          # Add deployment steps here.  Example: Azure App Service Deploy
          #   - task: AzureWebApp@1
          #     displayName: 'Azure App Service Deploy: your-app-name'
          #     inputs:
          #       azureSubscription: 'your-azure-subscription'  # Replace with your Azure subscription service connection
          #       appName: 'your-app-name' # Replace with your Azure App Service name
          #       package: '$(Build.ArtifactStagingDirectory)/**/*.jar'
          - script: |
              echo "Placeholder for deployment steps."
              echo "Artifacts are available in $(Build.ArtifactStagingDirectory)"
            displayName: 'Deployment Script (Replace with actual deployment logic)'

variables:
  - name: sonarQubeToken
    value: $(sonarQubeToken) # Define this variable in pipeline settings with secret scope

```