```groovy
pipeline {
    agent {
        docker {
            image 'maven:3.8.6-openjdk-17'  // Use a Maven-enabled Docker image for the build environment
            label 'maven' // Label for node affinity
        }
    }
    
    environment {
        // Define environment variables
        MAVEN_OPTS = '-Dmaven.repo.local=$HOME/.m2/repository'
        ARTIFACT_GROUP_ID = 'com.example' // Adjust as needed
        APPLICATION_NAME = 'my-java-app' // Adjust as needed
    }
    
    options {
        // Prevent concurrent builds
        disableConcurrentBuilds()
        // Set build discarder to keep only the last few builds
        buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '10'))
    }
    
    triggers {
        // Trigger the pipeline on Git SCM changes (adjust branch as needed)
        scm pollInterval: 'H/5 * * * *'
    }
    
    parameters {
        // Example: Add a parameter for environment selection (dev, staging, prod)
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Target environment for deployment')
    }

    stages {
        stage('Checkout SCM') {
            steps {
                git url: 'https://github.com/YOUR_GITHUB_USERNAME/YOUR_REPO_NAME.git', branch: 'main' // Replace with your repository URL and branch
            }
        }

        stage('Dependencies') {
            steps {
                sh 'mvn $MAVEN_OPTS clean install -DskipTests' // Install dependencies, skip tests
            }
        }
        
        stage('Unit Tests') {
            steps {
                sh 'mvn $MAVEN_OPTS test' // Run unit tests
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml' // Collect JUnit test results
                }
                failure {
                    echo "Unit tests failed."
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn $MAVEN_OPTS clean package' // Package the application
            }
        }
        
        stage('Static Analysis') {
          steps {
            // Placeholder for static analysis tools like SonarQube, Checkstyle, FindBugs, etc.
            // Example using spotbugs:
            // sh 'mvn spotbugs:check'
            echo "Static Analysis Placeholder.  Add your static analysis tool configuration here."
          }
        }

        stage('Push to Artifact Repository') {
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    def artifactVersion = pom.version
                    def artifactId = pom.artifactId
                    
                    sh "mvn $MAVEN_OPTS deploy -Dmaven.install.skip=true -DaltDeploymentRepository=central::default::http://YOUR_ARTIFACT_REPO_URL/repository/maven-releases"  // Replace with your artifact repo URL

                    //Alternative use of Artifactory plugin:
                    // rtMavenDeployer(
                    //     id: 'artifactory',
                    //     serverId: 'artifactory',  // Configured Artifactory server ID in Jenkins
                    //     releaseRepo: 'libs-release-local',
                    //     snapshotRepo: 'libs-snapshot-local'
                    // )
                }
            }
        }
        
        stage('Deploy to Environment') {
            when {
                expression { params.ENVIRONMENT != 'skip' } // Allow skipping deployment if needed
            }
            steps {
                script {
                    // Example Deployment - Replace with your actual deployment steps.
                    // Could be shell scripts, Ansible, Terraform, Kubernetes deployments, etc.
                    echo "Deploying to ${params.ENVIRONMENT} environment..."

                    //Placeholder: Add deployment logic here, using the artifact pushed in the previous stage

                    // Example using SSH:
                    // sshPublisher(publishers: [sshPublisherDesc(configName: 'your-ssh-server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'sudo systemctl restart your-app', execTimeout: 120, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/opt/your-app', remoteDirectorySDF: '', removePrefix: '', sourceFiles: 'target/*.jar')], usePromotion: false, useWorkspaceInPromotion: false, verbose: false)])

                    echo "Deployment to ${params.ENVIRONMENT} completed."
                }
            }
        }
    }
    
    post {
        always {
            // Clean up workspace after build
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
```