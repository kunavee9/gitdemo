```yaml
# tech_stack_detector.py
# Pipeline definition for a Java (Maven) project.
# This pipeline builds, tests, and deploys a Java application using Maven.

stages:
  - name: Build
    steps:
      - step:
          name: Build and Test
          image: maven:3.8.6-jdk-11
          caches:
            - maven  # Cache Maven dependencies
          script:
            - echo "Building the application..."
            - mvn clean install  # Clean and build the project
          artifacts:
            - target/*.jar  # Archive the JAR file

  - name: SonarQube Analysis
    steps:
      - step:
          name: SonarQube Scan
          image: sonarsource/sonar-scanner-cli:latest
          script:
            - echo "Running SonarQube analysis..."
            - sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN  # Perform SonarQube analysis
          services:  #Removed due to Bitbucket Pipelines not supporting dependent services
            - docker:dind

  - name: Deploy
    steps:
      - step:
          name: Deploy to Staging
          image: alpine/git # Can be replaced with more suitable deployment images.
          script:
            - echo "Deploying to Staging..."
            - echo "Deployment logic goes here, e.g., using SSH, SCP, or a deployment script"
            - mkdir -p /opt/staging
            - cp target/*.jar /opt/staging  # Placeholder for actual deployment

  - name: Release
    trigger: manual # Trigger the release stage manually
    steps:
      - step:
          name: Release to Production
          image: alpine/git # Can be replaced with more suitable deployment images.
          script:
            - echo "Releasing to Production..."
            - echo "Production deployment logic goes here."
            - mkdir -p /opt/production
            - cp target/*.jar /opt/production  # Placeholder for actual deployment
```