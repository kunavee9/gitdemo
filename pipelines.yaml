```yaml
# tech_stack_detector.py
stages:
  - stage: Build
    jobs:
      - job: MavenBuild
        displayName: 'Maven Build'
        pool:
          vmImage: 'ubuntu-latest'  # Or a self-hosted agent with Java and Maven

        steps:
          - task: Maven@3
            displayName: 'Maven Build'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean install' # or verify or package, depending on requirements
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'
              codeCoverageJacocoReportDirectory: '$(System.DefaultWorkingDirectory)/jacoco'
              codeCoverageFailIfEmpty: false

  - stage: Test
    dependsOn: Build
    jobs:
      - job: RunTests
        displayName: 'Run Tests'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: Maven@3
            displayName: 'Maven Test'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'

  - stage: Package
    dependsOn: Test
    jobs:
      - job: MavenPackage
        displayName: 'Maven Package'
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: Maven@3
            displayName: 'Maven Package'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'package'

          - task: CopyFiles@2
            displayName: 'Copy Artifact'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)/target' # Adjust if necessary
              Contents: '*.jar' # Or *.war, depending on the packaging
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
              flattenFolders: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop' # Or a more descriptive name
              publishLocation: 'Container'

  - stage: SonarQubeAnalysis
    dependsOn: Build # or Package depending on when you want to analyze
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: SonarQube
        displayName: 'SonarQube Analysis'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063159.SonarQubePrepare@5
            displayName: 'Prepare analysis on SonarQube'
            inputs:
              SonarQube: 'your_sonarqube_connection' # Replace with your SonarQube service connection name
              scannerMode: 'Maven'
              projectKey: 'your_project_key' # Replace with your SonarQube project key
              projectName: 'your_project_name' # Replace with your SonarQube project name

          - task: Maven@3
            displayName: 'Maven Analysis'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean install sonar:sonar' # Make sure to adjust goal if necessary.
              publishJUnitResults: false # Avoid duplicated results

          - task: SonarSource.sonarqube.6D01813A-9584-4B1C-8EEE-4D414CA49155.SonarQubePublish@5
            displayName: 'Publish Quality Gate Result'
            inputs:
              pollingTimeoutSec: '300'

variables:
  # Define variables here, if needed. For example:
  # mavenSettingsFile: 'path/to/settings.xml'
  Build.Reason: $(Build.Reason) # Required for condition
```