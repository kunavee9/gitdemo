```yaml
# tech_stack_detector.py
name: React CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Specify Node.js version

      - name: Install Dependencies
        run: npm install # Install project dependencies

      - name: Run ESLint
        run: npm run lint # Run ESLint for code linting

      - name: Run Prettier
        run: npm run format # Run Prettier for code formatting

      - name: Run Tests
        run: npm run test # Execute unit tests
        env:
          CI: true # Set CI environment variable (important for some testing frameworks)

      - name: Build Project
        run: npm run build # Build the React application for production

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build # Upload the 'build' directory as an artifact

  deploy:
    needs: build # Ensure the 'build' job completes successfully before deployment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Deploy only on pushes to the main branch

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Use GitHub secrets for AWS credentials
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Specify your AWS region

      - name: Deploy to S3 Bucket
        run: aws s3 sync build s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete # Deploy the 'build' directory to an S3 bucket

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" # Invalidate CloudFront cache after deployment
```