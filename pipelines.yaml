```groovy
pipeline {
    agent {
        docker {
            image 'maven:3.8.6-openjdk-17'
            args '-v $HOME/.m2:/root/.m2'  // Persist Maven repo across builds
        }
    }
    options {
        timestamps()
        disableConcurrentBuilds() // Avoid conflicts
    }
    triggers {
        pollSCM('H/5 * * * *')  // Poll every 5 minutes - adjust as needed
    }
    parameters {
        string(name: 'MAVEN_GOALS', defaultValue: 'clean install', description: 'Maven goals to execute')
        string(name: 'MAVEN_OPTS', defaultValue: '-DskipTests', description: 'Maven options')
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/your-repo/your-java-project.git', branch: 'main'  // Replace with your repo details
            }
        }

        stage('Dependencies') {
            steps {
                sh "mvn dependency:tree"  // Verify dependencies - remove if not needed, can add dependency:analyze
            }
        }

        stage('Tests') {
            steps {
                sh "mvn $MAVEN_GOALS $MAVEN_OPTS test"
            }
            post {
                always {
                    junit '**/target/surefire-reports/TEST-*.xml'
                }
                failure {
                    echo "Tests failed, check the JUnit report"
                }
                success {
                   echo "Tests passed"
                }
            }
        }

        stage('Build') {
            steps {
                sh "mvn $MAVEN_GOALS $MAVEN_OPTS" // Execute full build
            }
            post {
                 success {
                    archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true  // Archive the JAR file
                }
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SCANNER_HOME = tool 'SonarScanner' // Ensure you have a 'SonarScanner' tool configured in Jenkins
            }
            steps {
                withSonarQubeEnv('SonarQube') { // Ensure you have a 'SonarQube' server configured in Jenkins
                    sh "${SCANNER_HOME}/bin/sonar-scanner"
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        failure {
            // Send notification on failure
            echo "Pipeline failed!"
        }
        success {
            // Send notification on success
            echo "Pipeline completed successfully!"
        }
    }
}
```