```yaml
# tech_stack_detector.py
name: JavaScript CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18.x'  # Use a specific node version
      - name: Install Dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint  # Assuming you have a "lint" script in package.json

  test:
    name: Jest Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Install Dependencies
        run: npm install
      - name: Run Tests
        run: npm run test  # Assuming you have a "test" script in package.json
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: coverage  # Assuming Jest creates a 'coverage' directory

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Install Dependencies
        run: npm install
      - name: Build
        run: npm run build  # Assuming you have a "build" script in package.json
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist  # Or whatever your build output directory is

  deploy:
    name: Deploy to Production
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Replace with your AWS region

      - name: Deploy to S3 Bucket
        run: |
          aws s3 sync dist s3://${{ secrets.AWS_S3_BUCKET }} --delete #sync the bucket

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" #Invalidate everything, might be overkill
```