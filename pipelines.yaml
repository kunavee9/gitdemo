```groovy
pipeline {
    agent {
        docker {
            image 'node:16-alpine' // Or any other suitable Node.js image
            label 'react-build-agent' // Optional: Use a label to target specific build agents
        }
    }

    environment {
        NPM_CONFIG_CACHE = "$HOME/.npm" // Cache npm dependencies
        CI = 'true' // Indicate CI environment for specific libraries to behave accordingly (e.g., skip interactive prompts).
    }

    options {
        timestamps() // Add timestamps to console output
        disableConcurrentBuilds() // Prevent concurrent builds (if needed)
    }


    stages {

        stage('Checkout') {
            steps {
                git credentialsId: 'YOUR_GIT_CREDENTIALS_ID', url: 'YOUR_GIT_REPOSITORY_URL', branch: 'main' // Replace with your credentials and repository
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install' // Install all project dependencies
            }
        }

        stage('Lint') {
            steps {
                sh 'npm run lint' // Run linter (e.g., ESLint, Prettier)
            }
        }

        stage('Test') {
            steps {
                sh 'npm test -- --watchAll=false --coverage' // Run tests with coverage (adjust command as needed)

                // Optionally publish test results and code coverage
                junit 'reports/junit.xml' // Replace with your JUnit report path
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'coverage', reportName: 'Code Coverage Report', reportTitles: '']) // Replace with your coverage report path
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build' // Build the React application
            }
            post {
                success {
                    archiveArtifacts artifacts: 'build/**' // Archive the build output
                }
                failure {
                    echo 'Build failed.  Check the console output for errors.'
                }
            }
        }

        stage('Push to Artifact Repository') {
            when {
                branch 'main' // Only push from the main branch, adjust as needed
            }
            steps {
                script {
                   //Example with JFrog Artifactory
                   def server = Artifactory.server 'YOUR_ARTIFACTORY_SERVER_ID'
                   server.upload(
                       spec: """{
                           "files": [
                               {
                                   "pattern": "build/**",
                                   "target": "your-artifactory-repo/your-react-app/${env.BUILD_NUMBER}"
                               }
                           ]
                       }"""
                   )

                   // OR Example with AWS S3
                   //sh 'aws s3 sync build/ s3://your-s3-bucket/your-react-app/$BUILD_NUMBER/'

                   // OR Example with Nexus
                    //nexusPublisher nexusInstanceId: 'YOUR_NEXUS_INSTANCE_ID',
                    //    nexusRepository: 'your-nexus-repository',
                    //    packageGroup: 'your.group.id',
                    //    packageArtifactId: 'your-react-app',
                    //    packageVersion: env.BUILD_NUMBER,
                    //    pathToDirectory: 'build'
                }

            }
        }

        stage('Deploy') {
            when {
                branch 'main'  // Deploy only from the main branch
            }
            steps {
                script {
                    // Example deployment to AWS S3 using AWS CLI
                    sh 'aws s3 sync build/ s3://your-production-bucket/your-react-app/ --delete'

                    // Example deployment to Netlify using Netlify CLI
                    //sh 'netlify deploy --prod --dir=build --message "Deployment from Jenkins build $BUILD_NUMBER"'

                    // Example deployment to a web server using SSH
                    //sshPublisher(publishers: [sshPublisherDesc(configName: 'YOUR_SSH_SERVER_CONFIG', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'sudo systemctl restart your-web-server', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/var/www/your-react-app', remoteDirectorySDF: false, removePrefix: 'build', sourceFiles: 'build/**')])])
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Clean the workspace after the build
        }
    }
}
```