```groovy
pipeline {
    agent { 
        // Defined agent.  Consider using labels or a specific agent based on resource requirements.
        label 'maven-agent'  // Example: Ensure an agent with Maven and Java is available.  Can be 'any' if resources are dynamically provisioned.
    }
    
    options {
        // Define build options (e.g., skip stages, timestamps).
        timestamps()
        // disableConcurrentBuilds()  // Uncomment to prevent concurrent builds of the same job.
    }

    triggers {
        // Define triggers for the pipeline (e.g., SCM, cron).
        // Example: Trigger on any change to the 'main' branch in the repository.
        gitHubPush()
        // cron('H/5 * * * *')  // Example: Trigger every 5 minutes.
    }

    parameters {
        // Define parameters that can be passed to the build.
        string(name: 'VERSION_OVERRIDE', defaultValue: '', description: 'Override the version number (leave blank for default)')
        string(name: 'ENVIRONMENT', defaultValue: 'dev', description: 'Target environment (dev, staging, prod)')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout source code from the repository.
                git scm: 'your-git-repo-url', branch: 'main' // Replace with your repository URL and branch
            }
        }

        stage('Dependencies') {
            steps {
                // Resolve and download dependencies using Maven.
                sh 'mvn dependency:resolve'
            }
        }

        stage('Tests') {
            steps {
                // Run unit tests using Maven.  Fail the build if tests fail.
                sh 'mvn test'
            }
        }

        stage('Build') {
            steps {
                // Build the application using Maven.  Apply version override if provided.
                script {
                    def versionArg = params.VERSION_OVERRIDE ? "-DnewVersion=${params.VERSION_OVERRIDE}" : ''
                    sh "mvn clean install -DskipTests=true ${versionArg}" // Skips tests since they were already run.
                }
            }
        }

        stage('Push to Artifact Repository') {
            steps {
                // Push the built artifact to a Maven repository (e.g., Nexus, Artifactory).
                script {
                    // Determine the artifact version.  This may need adjustment based on your POM.
                    def pom = readMavenPom file: 'pom.xml'  // Assumes pom.xml is in the root directory
                    def artifactVersion = params.VERSION_OVERRIDE ?: pom.version // Use override if present, else POM version.
                    def artifactId = pom.artifactId
                    def groupId = pom.groupId

                    // Configure the Maven deploy plugin.  Adjust repository URL and credentials as needed.
                    withCredentials([usernamePassword(credentialsId: 'your-nexus-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh """
                            mvn deploy:deploy-file \
                                -Dfile=target/${artifactId}-${artifactVersion}.jar \
                                -DgroupId=${groupId} \
                                -DartifactId=${artifactId} \
                                -Dversion=${artifactVersion} \
                                -Dpackaging=jar \
                                -DrepositoryId=nexus \
                                -Durl=http://your-nexus-url/repository/maven-releases/ \
                                -Dusername=$USERNAME \
                                -Dpassword=$PASSWORD
                        """
                    }
                }
            }
        }

        stage('Deployment') {
            when {
                // Define when this stage should execute (e.g., based on environment parameter).
                expression { params.ENVIRONMENT != 'dev' } // Example: Deploy only to non-dev environments.
            }
            steps {
                // Deploy the application to the specified environment.
                script {
                    // Example deployment using SSH.  Replace with your deployment logic.
                    withCredentials([usernamePassword(credentialsId: 'your-ssh-credentials', usernameVariable: 'SSH_USERNAME', passwordVariable: 'SSH_PASSWORD')]) {
                        sh """
                            sshpass -p \$SSH_PASSWORD ssh \$SSH_USERNAME@your-deployment-server "
                                # Your deployment commands here.  For example:
                                # scp target/${readMavenPom(file: 'pom.xml').artifactId}-${readMavenPom(file: 'pom.xml').version}.jar /path/to/deployment/location/
                                # systemctl restart your-service
                            "
                        """
                    }
                }
            }
        }
    }

    post {
        // Define actions to be performed after the build, regardless of the outcome.
        always {
            echo "Pipeline finished."
        }
        success {
            // Actions to perform on successful builds.
            echo "Build succeeded!"
        }
        failure {
            // Actions to perform on failed builds.
            echo "Build failed!"
        }
    }
}
```
