```yaml
# tech_stack_detector.py
# Pipeline for building and deploying a Java application using Maven.
# Includes stages for checkout, build, test, and potentially deploy.

stages:
  - checkout
  - build
  - test
  - deploy

checkout:
  stage: checkout
  image: alpine/git:latest
  script:
    - echo "Checking out code..."
    - git clone $CI_REPOSITORY_URL .
    - echo "Checkout complete."
  artifacts:
    paths:
      - .
    expire_in: 1 hour

build:
  stage: build
  image: maven:3.8.7-openjdk-17 # Use a specific Maven and Java version
  script:
    - echo "Building the application..."
    - mvn clean install -DskipTests # Clean, compile, package, and install. Skip tests during build.
    - echo "Build complete."
  artifacts:
    paths:
      - target/*.jar # Assuming a JAR file is produced
    expire_in: 1 day

test:
  stage: test
  image: maven:3.8.7-openjdk-17
  script:
    - echo "Running tests..."
    - mvn test # Execute the JUnit tests
    - echo "Tests complete."
  artifacts:
    reports:
      junit: target/surefire-reports/TEST-*.xml # Assuming standard Surefire reports
  dependencies:
    - build # Ensure build stage is complete before testing
  allow_failure: true # Allow failure if tests are flaky.  Consider removing if test stability is improved

deploy:
  stage: deploy
  image: alpine/kubectl:latest # Or your preferred deployment image
  script:
    - echo "Deploying the application..."
    - echo "Dummy Deployment Command" # Replace with actual deployment commands
    - echo "Deployment complete."
  dependencies:
    - test # Ensure tests have passed (or at least been attempted)
  only:
    - main # Deploy only on the main branch.  Adjust as needed (tags, etc.)
  when: manual # Require manual triggering of the deploy stage for safety

```