```yaml
# tech_stack_detector.py
stages:
  - name: Build
    steps:
      - step:
          name: Build and Test
          image: maven:3.8.5-openjdk-17
          commands:
            - echo "Starting Maven build and test..."
            - mvn clean install # Clean and build the project
            - echo "Maven build and test completed."
          artifacts:
            - target/* # Store built artifacts, e.g., JAR file.

  - name: SonarQube Analysis
    steps:
      - step:
          name: SonarQube Scan
          image: sonarsource/sonar-scanner-cli:latest
          script:
            - echo "Starting SonarQube analysis..."
            - sonar-scanner # Execute SonarQube scanner
            - echo "SonarQube analysis completed."
          environment:
            SONAR_HOST_URL: ${SONAR_HOST_URL} #  e.g., http://your-sonar-host
            SONAR_TOKEN: ${SONAR_TOKEN}       # SonarQube token with permissions to analyze project
            SONAR_PROJECT_KEY: ${SONAR_PROJECT_KEY} # Unique identifier of the project in SonarQube
          # Add the following lines if you use a properties file:
          #    - sonar.projectKey=$SONAR_PROJECT_KEY
          #    - sonar.host.url=$SONAR_HOST_URL
          #    - sonar.login=$SONAR_TOKEN
          #  If your SonarQube configuration requires additional properties:
          #    - sonar.java.binaries=target/classes
          #    - sonar.sources=src

  - name: Deploy
    steps:
      - step:
          name: Deploy to Staging
          image: alpine/git # Using a lightweight image for deployment operations
          script:
            - echo "Deploying to staging environment..."
            - # Add deployment commands here, e.g., using SSH, SCP, or a deployment tool
            - echo "Deployment to staging completed."
          deployment: staging # Mark as a staging deployment
          trigger: automatic # Automatically trigger this stage if the previous one succeeds

  - name: Release
    steps:
      - step:
          name: Promote to Production
          image: alpine/git
          script:
            - echo "Promoting to production environment..."
            - # Add promotion commands here.  This might involve tagging a release,
            - # updating a database, or switching load balancer configurations.
            - echo "Promotion to production completed."
          deployment: production # Mark as a production deployment
          trigger: manual  # Require manual approval before deploying to production
          approve: true # Require manual approval
```