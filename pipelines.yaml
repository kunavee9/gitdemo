```yaml
# tech_stack_detector.py
# Pipeline for React application deployment using best practices.
# Includes linting, testing, building, and deploying to a staging environment.

stages:
  - lint
  - test
  - build
  - deploy_staging

lint:
  stage: lint
  image: node:latest
  script:
    - echo "Linting code..."
    - npm install --global eslint
    - eslint src/**/*.js
  tags:
    - docker
  rules:
    - changes:
        - src/**/*

test:
  stage: test
  image: node:latest
  script:
    - echo "Running tests..."
    - npm install
    - npm test -- --coverage
  coverage: '/All files[^|]*\|[^%]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: coverage/junit.xml
    paths:
      - coverage/
  tags:
    - docker
  rules:
    - changes:
        - src/**/*
        - test/**/*

build:
  stage: build
  image: node:latest
  script:
    - echo "Building application..."
    - npm install
    - npm run build
  artifacts:
    paths:
      - build/
  tags:
    - docker
  rules:
    - changes:
        - src/**/*
        - public/**/*
        - package.json
        - webpack.config.js
  dependencies:
    - test

deploy_staging:
  stage: deploy_staging
  image: docker:latest
  before_script:
    - echo "Logging into Docker Hub..."
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
  script:
    - echo "Deploying to staging environment..."
    - docker pull my-react-app:latest || true #Ignore error if image does not exist
    - docker build -t my-react-app:staging .
    - docker tag my-react-app:staging my-react-app:latest
    - docker push my-react-app:latest
    #Add the instructions to deploy to the staging enviroment.
    - echo "Deployment complete."
  tags:
    - docker
  environment:
    name: staging
    url: https://staging.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  dependencies:
    - build
```