```groovy
pipeline {
    agent {
        docker { image 'maven:3.8.6-jdk-11' }
    }
    options {
        skipStagesAfterUnstable()
        buildDiscarder(logRotator(daysToKeepStr: '7', numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    parameters {
        string(name: 'VERSION_SUFFIX', defaultValue: '-SNAPSHOT', description: 'Suffix for the artifact version')
        string(name: 'DEPLOY_ENVIRONMENT', defaultValue: 'dev', description: 'Environment to deploy to (dev, staging, prod)')
    }
    stages {
        stage('Checkout SCM') {
            steps {
                git branch: 'main', url: 'https://github.com/YOUR_GITHUB_USERNAME/YOUR_JAVA_PROJECT.git'
            }
        }

        stage('Dependencies Check') {
            steps {
                sh 'mvn dependency:tree'
            }
        }

        stage('Unit Tests') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/TEST-*.xml'
                }
                failure {
                    echo 'Unit tests failed!'
                }
            }
        }

        stage('Build') {
            steps {
                sh "mvn clean install -DskipTests -Drevision=\$(echo \${env.JOB_NAME} | tr -dc '[:alnum:]')\${VERSION_SUFFIX}"
            }
            post {
                failure {
                    echo 'Build Failed!'
                }
                success {
                    echo 'Build Success!'
                }
            }
        }

        stage('Push to Artifact Repository') {
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    def artifactId = pom.artifactId
                    def version = pom.version
                    def groupId = pom.groupId
                    def jarFile = "target/${artifactId}-${version}.jar" // Example JAR file path, adjust as needed
                    sh "mvn deploy -Dmaven.install.skip=true -Dmaven.deploy.skip=false"
                }
            }
        }

        stage('Deploy') {
            when {
                expression {
                    return params.DEPLOY_ENVIRONMENT != 'skip'
                }
            }
            steps {
                script {
                    if (params.DEPLOY_ENVIRONMENT == 'dev') {
                        echo "Deploying to Development environment"
                        // Add deployment steps for DEV environment
                        sh 'echo "Deploying to Dev environment"'
                    } else if (params.DEPLOY_ENVIRONMENT == 'staging') {
                        echo "Deploying to Staging environment"
                        // Add deployment steps for STAGING environment
                        sh 'echo "Deploying to Staging environment"'
                    } else if (params.DEPLOY_ENVIRONMENT == 'prod') {
                        echo "Deploying to Production environment"
                        // Add deployment steps for PROD environment
                        sh 'echo "Deploying to Prod environment"'
                    } else {
                        echo "Invalid environment selected: ${params.DEPLOY_ENVIRONMENT}"
                        error "Invalid deployment environment selected."
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
```