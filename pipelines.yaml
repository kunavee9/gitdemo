```yaml
# tech_stack_detector.py
stages:
  - stage: Build
    displayName: Build and Test
    jobs:
      - job: MavenBuild
        displayName: Maven Build and Test
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Maven@3
            displayName: 'Maven Build with Tests'
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'Cobertura'
              codeCoverageFailIfEmpty: true

  - stage: SonarQubeAnalysis
    displayName: SonarQube Analysis
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: SonarQube
        displayName: Perform SonarQube Analysis
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063149.SonarQubePrepare@4
            displayName: 'Prepare analysis on SonarQube'
            inputs:
              SonarQube: 'your_sonarqube_connection'  # Replace with your SonarQube service connection name
              scannerMode: 'Maven'
              projectKey: 'your_project_key' # Replace with your SonarQube project key
              projectName: 'Your Project Name'  # Replace with your project name

          - task: Maven@3
            displayName: 'Maven Build with SonarQube Analysis'
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              jdkArchitectureOption: 'x64'
              goals: 'clean verify sonar:sonar'

          - task: SonarSource.sonarqube.6D01813A-9584-4CAA-8D6A-6EE5AA81AC5C.SonarQubePublish@5
            displayName: 'Publish Quality Gate Result'
            inputs:
              pollingTimeoutSec: '300'

  - stage: Package
    displayName: Package Artifact
    dependsOn: SonarQubeAnalysis
    condition: and(succeeded(), eq(variables['SonarQube.QualityGate.Status'], 'OK'))
    jobs:
      - job: PackageArtifact
        displayName: Package JAR Artifact
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: CopyFiles@2
            displayName: 'Copy Files to Artifact Staging Directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: 'target/*.jar'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

  - stage: Deploy
    displayName: Deploy to Environment
    dependsOn: Package
    condition: succeeded()
    jobs:
      - deployment: DeployToDev
        displayName: Deploy to Development Environment
        environment: 'Development'  # Replace with your environment name
        pool:
          vmImage: ubuntu-latest
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Artifact'
                  inputs:
                    artifact: 'drop'
                    path: '$(System.ArtifactsDirectory)'

                - task: AzureWebApp@1  #Example Deployment -  Customize as Needed
                  displayName: 'Deploy to Azure App Service'
                  inputs:
                    azureSubscription: 'your_azure_subscription' #Replace with your Azure subscription service connection name
                    appName: 'your_app_name'  # Replace with your Azure App Service name
                    package: '$(System.ArtifactsDirectory)/**/*.jar'
```