```yaml
# tech_stack_detector.py
name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests to the main branch

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x' # Use a specific Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint # Assuming you have a lint script in package.json

  test:
    runs-on: ubuntu-latest
    needs: lint  # Ensure linting passes before running tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test # Assuming you have a test script in package.json

  build:
    runs-on: ubuntu-latest
    needs: test # Ensure tests pass before building
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build # Assuming you have a build script in package.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist # Or whatever your build output directory is

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: Production # Define your deployment environment
      url: ${{ steps.deploy-url.outputs.url }} # Example using an output of deployment step
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        run: aws s3 sync dist s3://${{ secrets.AWS_S3_BUCKET }} --delete

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths '/*'

      - name: Get deploy URL
        id: deploy-url
        run: echo "::set-output name=url::https://${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}.cloudfront.net"
```